const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const decompress = require('decompress')
const replace = require('replace-in-file')
const cssnano = require('cssnano')

const TEMP_DIR = path.resolve('.tmp')

/**
 * Extracts the font name.
 *
 * @param {string} file
 */
const parseFontName = (file) => {
  var matches = /font-family:\s*'([^']*)'/g.exec(fs.readFileSync(file, 'utf-8'))

  if (matches.length < 1) {
    throw Error('Unable to find font name')
  }

  return matches[1]
}

/**
 * Uncompresses the zip file generated by the Icomoon app.
 *
 * @param {string} icomoonZipFile
 */
const unzipIcomoon = (icomoonZipFile) => {
  if (fs.existsSync(path.resolve(TEMP_DIR))) {
    return Promise.resolve()
  }

  return decompress(icomoonZipFile, TEMP_DIR).then(files => {
    console.log(`Unzipped icomoon files into ${chalk.green(TEMP_DIR)}`)
  })
}

/**
 * Returns the list of files that will be copied.
 *
 * @param {object} paths
 */
const getFiles = (paths, fontName) => {
  const files = [
    {
      src: path.resolve(TEMP_DIR, 'demo.html'),
      dest: path.resolve(paths.docs, 'demo/index.html')
    },
    {
      src: path.resolve(TEMP_DIR, 'demo-files/demo.css'),
      dest: path.resolve(paths.docs, 'demo/styles.css')
    },
    {
      src: path.resolve(TEMP_DIR, 'demo-files/demo.js'),
      dest: path.resolve(paths.docs, 'demo/scripts.js')
    },
    {
      src: path.resolve(TEMP_DIR, 'selection.json'),
      dest: path.resolve(paths.docs, 'icomoon.json')
    },
    {
      src: path.resolve(TEMP_DIR, 'style.css'),
      dest: path.resolve(paths.css, `${fontName}.css`)
    },
    {
      src: path.resolve(paths.css, `${fontName}.css`),
      dest: path.resolve(paths.css, `${fontName}.min.css`),
      ignore: true
    },
    {
      src: path.resolve(TEMP_DIR, 'liga.js'),
      dest: path.resolve(paths.liga, `${fontName}.js`),
      // ignore: true
    }
  ]

  // Font files
  const fontsPath = path.resolve(TEMP_DIR, 'fonts')
  fs.readdirSync(fontsPath).map((file) => {
    files.push({
      src: path.resolve(fontsPath, file),
      dest: path.resolve(paths.fonts, `${fontName}${path.parse(file).ext}`)
    })
  })

  // Sass files

  if (fs.existsSync(path.resolve(TEMP_DIR, 'style.scss'))) {
    files.push(
      ...[
        {
          src: path.resolve(TEMP_DIR, 'style.scss'),
          dest: path.resolve(paths.preProcessor, '_icons.scss')
        },
        {
          src: path.resolve(TEMP_DIR, 'variables.scss'),
          dest: path.resolve(paths.preProcessor, '_variables.scss')
        },
        {
          src: '',
          dest: path.resolve(paths.preProcessor, `${fontName}.scss`),
          ignore: true
        }
      ]
    )
  }

  return files
}

/**
 * Copies the files from source to destination.
 *
 * @param {object} paths
 */
const copyFiles = (paths, fontName) => {
  const files = getFiles(paths, fontName)

  return Promise
    .all(files.map(item => {
      if (item.ignore === true) {
        return Promise.resolve()
      }

      return fs.copy(item.src, item.dest)
    }))
    .then(() => {
      console.log('Files copied to destination')
    })
}

/**
 * Updates file paths references in the docs files.
 *
 * @param {object} paths
 * @param {string} fontName
 */
const updateDocsFiles = (paths, fontName) => {
  return replace({
    files: path.resolve(paths.docs, 'demo/index.html'),
    from: [
      'demo-files/demo.css',
      'demo-files/demo.js',
      'style.css',
      'liga.js'
    ],
    to: [
      'styles.css',
      'scripts.js',
      `${path.relative(path.resolve(paths.docs, 'demo'), paths.css)}/${fontName}.min.css`,
      `${path.relative(path.resolve(paths.docs, 'demo'), paths.liga)}/${fontName}.js`
    ]
  })
    .then(() => {
      console.log('Modified doc files to use the new references.')
    })
}

/**
 * Creates main pre-processor file to link the rest.
 *
 * @param {object} paths
 * @param {string} fontName
 */
const createMainPreProcessorFile = (paths, fontName) => {
  const mainFile = path.resolve(paths.preProcessor, `${fontName}.scss`)

  if (fs.existsSync(mainFile)) {
    return Promise.resolve()
  }

  return fs.appendFile(mainFile, '@import "variables";\n@import "icons";\n')
}

/**
 * Updates file paths references in preProcessor files (sass, less, stylus).
 *
 * @param {object} paths
 * @param {string} fontName
 */
const updatePreProcessorFiles = (paths, fontName) => {
  const preProcessorFile = path.resolve(paths.preProcessor, '_icons.scss')
  const formerFontName = parseFontName(path.resolve(TEMP_DIR, 'style.css'))

  return replace({
    files: path.resolve(paths.preProcessor, `_variables.scss`),
    from: ['$icomoon-font-path: "fonts" !default;'],
    to: [`$${fontName}-font-path: "${path.relative(paths.preProcessor, paths.fonts)}" !default;`]
  })
    .then(() => replace({
      files: preProcessorFile,
      from: [
        /\$icomoon-font-path/g,
        new RegExp(`font-family: '${formerFontName}'`, 'g'), // font-family
        new RegExp(`/${formerFontName}.`, 'g'), // font-face url
        new RegExp(`#${formerFontName}'`, 'g'), // font-face hashbang svg
        '@import "variables";\n\n'
      ],
      to: [
        `$${fontName}-font-path`,
        `font-family: '${fontName}'`,
        `/${fontName}.`,
        `#${fontName}'`,
        ''
      ]
    }))
    .then(() => createMainPreProcessorFile(paths, fontName))
    .then(() => {
      console.log('Modified pre-processor files to use the new references.')
    })
}

/**
 * Updates file paths references in css files.
 *
 * @param {object} paths
 * @param {string} fontName
 */
const updateCssFiles = (paths, fontName) => {
  const cssFile = path.resolve(paths.css, `${fontName}.css`)
  const formerFontName = parseFontName(path.resolve(TEMP_DIR, 'style.css'))

  return replace({
    files: cssFile,
    from: [/url\('fonts\//g],
    to: [`url('${path.relative(paths.css, paths.fonts)}/`]
  })
    .then(() => replace({
      files: cssFile,
      from: [new RegExp(formerFontName, 'g')],
      to: [fontName]
    }))
    .then(() => {
      console.log('Modified css files to use the new references.')
    })
}

/**
 * Minifies the generated css.
 *
 * @param {object} paths
 * @param {string} fontName
 */
const minifyCss = (paths, fontName) => {
  const cssFile = path.resolve(paths.css, `${fontName}.css`)

  return cssnano.process(fs.readFileSync(cssFile)).then(result => {
    fs.writeFileSync(path.resolve(paths.css, `${fontName}.min.css`), result)

    console.log('Minified css.')
  })
}

/**
 * Removes temporary folder.
 */
const removeTempDir = () => {
  if (!fs.existsSync(TEMP_DIR)) {
    return Promise.resolve()
  }

  return fs.remove(TEMP_DIR).then(() => {
    console.log(`Removed temporary directory ${chalk.green(TEMP_DIR)}`)
  })
}

/**
 * Uncompresses the zip file generated by icomoon and moves the files to the new destination
 *
 * @param {string} icomoonZipFile
 */
const cmd = (fontName, icomoonZipFile, paths) => {
  return unzipIcomoon(icomoonZipFile)
    .then(() => copyFiles(paths, fontName))
    .then(() => updatePreProcessorFiles(paths, fontName))
    .then(() => updateCssFiles(paths, fontName))
    .then(() => updateDocsFiles(paths, fontName))
    .then(() => minifyCss(paths, fontName))
    .then(removeTempDir)
}

module.exports = {
  cmd: cmd,
  getFiles: getFiles,
  unzipIcomoon: unzipIcomoon,
  removeTempDir: removeTempDir
}
